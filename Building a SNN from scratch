{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "891c0769",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      ".. _iris_dataset:\n",
      "\n",
      "Iris plants dataset\n",
      "--------------------\n",
      "\n",
      "**Data Set Characteristics:**\n",
      "\n",
      "    :Number of Instances: 150 (50 in each of three classes)\n",
      "    :Number of Attributes: 4 numeric, predictive attributes and the class\n",
      "    :Attribute Information:\n",
      "        - sepal length in cm\n",
      "        - sepal width in cm\n",
      "        - petal length in cm\n",
      "        - petal width in cm\n",
      "        - class:\n",
      "                - Iris-Setosa\n",
      "                - Iris-Versicolour\n",
      "                - Iris-Virginica\n",
      "                \n",
      "    :Summary Statistics:\n",
      "\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "                    Min  Max   Mean    SD   Class Correlation\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "    sepal length:   4.3  7.9   5.84   0.83    0.7826\n",
      "    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n",
      "    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n",
      "    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n",
      "    ============== ==== ==== ======= ===== ====================\n",
      "\n",
      "    :Missing Attribute Values: None\n",
      "    :Class Distribution: 33.3% for each of 3 classes.\n",
      "    :Creator: R.A. Fisher\n",
      "    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n",
      "    :Date: July, 1988\n",
      "\n",
      "The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\n",
      "from Fisher's paper. Note that it's the same as in R, but not as in the UCI\n",
      "Machine Learning Repository, which has two wrong data points.\n",
      "\n",
      "This is perhaps the best known database to be found in the\n",
      "pattern recognition literature.  Fisher's paper is a classic in the field and\n",
      "is referenced frequently to this day.  (See Duda & Hart, for example.)  The\n",
      "data set contains 3 classes of 50 instances each, where each class refers to a\n",
      "type of iris plant.  One class is linearly separable from the other 2; the\n",
      "latter are NOT linearly separable from each other.\n",
      "\n",
      ".. topic:: References\n",
      "\n",
      "   - Fisher, R.A. \"The use of multiple measurements in taxonomic problems\"\n",
      "     Annual Eugenics, 7, Part II, 179-188 (1936); also in \"Contributions to\n",
      "     Mathematical Statistics\" (John Wiley, NY, 1950).\n",
      "   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n",
      "     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n",
      "   - Dasarathy, B.V. (1980) \"Nosing Around the Neighborhood: A New System\n",
      "     Structure and Classification Rule for Recognition in Partially Exposed\n",
      "     Environments\".  IEEE Transactions on Pattern Analysis and Machine\n",
      "     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n",
      "   - Gates, G.W. (1972) \"The Reduced Nearest Neighbor Rule\".  IEEE Transactions\n",
      "     on Information Theory, May 1972, 431-433.\n",
      "   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al\"s AUTOCLASS II\n",
      "     conceptual clustering system finds 3 classes in the data.\n",
      "   - Many, many more ...\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.model_selection import train_test_split\n",
    "np.random.seed(10)\n",
    "\n",
    "iris = load_iris()\n",
    "list(iris.keys())\n",
    "print(iris.DESCR)\n",
    "\n",
    "class SNN:\n",
    "    \n",
    "    def __init__(self, data, n_iterations=2000, learning_rate = 0.01):\n",
    "        self.data = data\n",
    "        self.n_iterations = n_iterations\n",
    "        self.learning_rate = learning_rate\n",
    "\n",
    "    #function to load the data and split into features and labels          \n",
    "    def load_data(self):\n",
    "        iris = self.data\n",
    "        df = pd.DataFrame(data= np.c_[iris['data'], iris['target']],columns= iris['feature_names'] + ['target'])\n",
    "        df['target']= np.where(df['target'] == 0.0, 1, 0)\n",
    "        X = df[iris['feature_names']].values\n",
    "        y = df['target'].values\n",
    "        return X,y\n",
    "\n",
    "    #function to split data into training and test sets\n",
    "    def train_test(self,X,y):\n",
    "        x_train, x_test, y_train, y_test = train_test_split(X,y,test_size=0.2, random_state=10)\n",
    "        return x_train, x_test, y_train, y_test\n",
    "        \n",
    "    #function to create intial weights and bias - starting with all 0\n",
    "    def initial_parameters(self,X):\n",
    "        n_samples, n_features = X.shape\n",
    "        theta = np.zeros(X.shape[1])\n",
    "        bias = 0\n",
    "        return theta, bias, n_samples\n",
    "\n",
    "    #the sigmoid function for logistic regression\n",
    "    def logit(self,x):\n",
    "        return 1/(1+np.exp(-x))\n",
    "\n",
    "    #defining our cost function\n",
    "    def cost_function(self,X, y, theta, bias):\n",
    "        m = len(y)\n",
    "        z = np.matmul(X, theta) + bias\n",
    "        h = self.logit(z)\n",
    "        cost = np.square(np.subtract(y,h)).mean()\n",
    "        #cost = (1/m)*(np.matmul((-y).T , np.log(h))-np.matmul((1-y).T , np.log(1-h)))\n",
    "        return cost\n",
    "\n",
    "    #the leanring schedule for stochastic and mini-batch gradient descent\n",
    "    def learning_schedule(self,t0, t1, t): \n",
    "        return t0/(t+t1)\n",
    "    \n",
    "    #function to calculate the gradients\n",
    "    def gradient(self,X, y, theta, bias,learning_rate):\n",
    "        m = len(y)\n",
    "        z = np.matmul(X, theta) + bias\n",
    "        h = self.logit(z)\n",
    "        t_gradient = 2/m * np.matmul(X.T,(h - y) )\n",
    "        theta = theta - self.learning_rate * t_gradient\n",
    "        b_gradient = np.mean((h - y))\n",
    "        bias = bias - learning_rate * b_gradient\n",
    "        return theta, bias\n",
    "\n",
    "    #function to perform the predictions and determine how many are above and below 0.5\n",
    "    #above 0.5 means predicted to be setosa, below means predicted to not be setosa\n",
    "    def predict(self,X, theta, bias,threshold=0.5):\n",
    "        return self.logit(np.matmul(X,theta.T) + bias) >= threshold\n",
    "    \n",
    "#################################################################################          \n",
    "\n",
    "    #function for batch gradient descent\n",
    "    def batch_GD(self):\n",
    "        X,y = self.load_data() #load the data\n",
    "        X_train, X_test, y_train, y_test = self.train_test(X,y) #split the data to traina and test\n",
    "        theta, bias, n_samples = self.initial_parameters(X_train) #get initial weights and bias\n",
    "        costs = []\n",
    "        for i in range(self.n_iterations): # for each iterations calculate gradient and cost\n",
    "            theta, bias = self.gradient(X_train, y_train, theta, bias,self.learning_rate)\n",
    "            costs.append( self.cost_function(X_train, y_train, theta, bias))\n",
    "            if i % 100 == 0:\n",
    "                print (\"Cost after iteration %i: %f\" %(i, costs[i])) #keep track of costs\n",
    "        print(\"train accuracy: {} %\".format((self.predict(X_train,theta, bias) == y_train).mean()))\n",
    "        print(\"test accuracy: {} %\".format((self.predict(X_test,theta, bias) == y_test).mean()))\n",
    "\n",
    "        return costs\n",
    "        \n",
    "\n",
    "    #function for stochastic gradient descent        \n",
    "    def stochastic_GD(self,t0,t1, n_epochs):\n",
    "        X,y = self.load_data()  #load the data\n",
    "        X_train, X_test, y_train, y_test = self.train_test(X,y) #split the data to traina and test\n",
    "        theta, bias, n_samples = self.initial_parameters(X_train) #get initial weights and bias\n",
    "        m = len(y_train)\n",
    "        epoch_loss = []\n",
    "\n",
    "        for epoch in range(n_epochs): # for each epoch calculate gradient and cost for only one random instance\n",
    "            for i in range(m):\n",
    "                costs = []\n",
    "                random_index = np.random.randint(m)\n",
    "                X_instance = X_train[random_index:random_index+1]\n",
    "                y_instance = y_train[random_index:random_index+1]\n",
    "                theta, bias = self.gradient(X_instance, y_instance, theta, bias,self.learning_rate)\n",
    "                learning_rate = self.learning_schedule(t0,t1,epoch * m + i)\n",
    "                costs.append( self.cost_function(X_instance, y_instance, theta,bias))\n",
    "            avg_loss = sum(costs)/len(costs) #average the costs for the m iterations for each epoch\n",
    "            epoch_loss.append(avg_loss) #keep track of costs\n",
    "\n",
    "            if epoch % 10 == 0:\n",
    "                print (\"Cost after epoch %epoch: %f\" %(epoch, avg_loss))\n",
    "        print(\"train accuracy: {} %\".format((self.predict(X_train,theta, bias) == y_train).mean()))\n",
    "        print(\"test accuracy: {} %\".format((self.predict(X_test,theta, bias) == y_test).mean()))\n",
    "\n",
    "        return epoch_loss\n",
    "\n",
    "    #function for mini batch gradient descent  \n",
    "    def mini_batch_GD(self,t0,t1, n_epochs):\n",
    "        X,y = self.load_data() #load the data\n",
    "        X_train, X_test, y_train, y_test = self.train_test(X,y) #split the data to traina and test\n",
    "        theta, bias, n_samples = self.initial_parameters(X_train) #get initial weights and bias\n",
    "        m = len(y_train)\n",
    "        epoch_loss = []\n",
    "\n",
    "        for epoch in range(n_epochs): # for each epoch calculate gradient and cost for only 12 random instances\n",
    "            for i in range(m):\n",
    "                costs = []\n",
    "                random_indexes = np.random.choice(X_train.shape[0], 12, replace=False)\n",
    "                X_instance = X_train[random_indexes, :]\n",
    "                y_instance = y_train[random_indexes]\n",
    "                theta, bias = self.gradient(X_instance, y_instance, theta, bias,self.learning_rate)\n",
    "                self.learning_rate = self.learning_schedule(t0,t1,epoch * m + i)\n",
    "                costs.append( self.cost_function(X_instance, y_instance, theta,bias))\n",
    "            avg_loss = sum(costs)/len(costs)#average the costs for the m iterations for each epoch\n",
    "            epoch_loss.append(avg_loss) #keep track of costs\n",
    "\n",
    "            if epoch % 10 == 0:\n",
    "                print (\"Cost after epoch %epoch: %f\" %(epoch, avg_loss))\n",
    "        print(\"train accuracy: {} %\".format((self.predict(X_train,theta, bias) == y_train).mean()))\n",
    "        print(\"test accuracy: {} %\".format((self.predict(X_test,theta, bias) == y_test).mean()))\n",
    "\n",
    "        return epoch_loss\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "da9f77c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = SNN(iris, 2000, 0.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3eb7424f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after iteration 0: 0.258447\n",
      "Cost after iteration 100: 0.001911\n",
      "Cost after iteration 200: 0.000715\n",
      "Cost after iteration 300: 0.000404\n",
      "Cost after iteration 400: 0.000270\n",
      "Cost after iteration 500: 0.000197\n",
      "Cost after iteration 600: 0.000153\n",
      "Cost after iteration 700: 0.000123\n",
      "Cost after iteration 800: 0.000102\n",
      "Cost after iteration 900: 0.000087\n",
      "Cost after iteration 1000: 0.000075\n",
      "Cost after iteration 1100: 0.000065\n",
      "Cost after iteration 1200: 0.000058\n",
      "Cost after iteration 1300: 0.000052\n",
      "Cost after iteration 1400: 0.000047\n",
      "Cost after iteration 1500: 0.000042\n",
      "Cost after iteration 1600: 0.000039\n",
      "Cost after iteration 1700: 0.000035\n",
      "Cost after iteration 1800: 0.000033\n",
      "Cost after iteration 1900: 0.000030\n",
      "train accuracy: 1.0 %\n",
      "test accuracy: 1.0 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mse_batch = test.batch_GD()\n",
    "\n",
    "plt.plot(mse_batch)\n",
    "plt.ylabel('Cost')\n",
    "plt.xlabel('Iteration')\n",
    "plt.title(\"Batch Gradient Descent with Learning rate = 0.1\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a1de81fa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after epoch 0.000000e+00poch: 0.000094\n",
      "Cost after epoch 1.000000e+01poch: 0.000000\n",
      "Cost after epoch 2.000000e+01poch: 0.000005\n",
      "Cost after epoch 3.000000e+01poch: 0.000000\n",
      "Cost after epoch 4.000000e+01poch: 0.000000\n",
      "train accuracy: 1.0 %\n",
      "test accuracy: 1.0 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mse_stochastic = test.stochastic_GD(5,50,50)\n",
    "\n",
    "plt.plot(mse_stochastic)\n",
    "plt.ylabel('Cost')\n",
    "plt.xlabel('Epoch')\n",
    "plt.title(\"Stochastic Gradient Descent\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6ef6753a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cost after epoch 0.000000e+00poch: 0.008054\n",
      "Cost after epoch 1.000000e+01poch: 0.000861\n",
      "Cost after epoch 2.000000e+01poch: 0.000220\n",
      "Cost after epoch 3.000000e+01poch: 0.000065\n",
      "Cost after epoch 4.000000e+01poch: 0.000250\n",
      "train accuracy: 1.0 %\n",
      "test accuracy: 1.0 %\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "mse_mini_batch = test.mini_batch_GD(5,50,50)\n",
    "\n",
    "plt.plot(mse_mini_batch)\n",
    "plt.ylabel('Cost')\n",
    "plt.xlabel('Epoch')\n",
    "plt.title(\"Mini Batch Gradient Descent\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6d6247f6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
